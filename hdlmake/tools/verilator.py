#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 - 2015 CERN
# Author: Pawel Szostek (pawel.szostek@cern.ch)
# Multi-tool support by Javier D. Garcia-Lasheras (javier@garcialasheras.com)
#
# This file is part of Hdlmake.
#
# Hdlmake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hdlmake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hdlmake.  If not, see <http://www.gnu.org/licenses/>.
#

"""Module providing support for Verilator simulator"""

from __future__ import absolute_import
import string
import logging

from .make_sim import ToolSim
from hdlmake.srcfile import VerilogFile, VHDLFile, SVFile


class ToolVerilator(ToolSim):

    """Class providing the interface for Icarus Verilog simulator"""

    TOOL_INFO = {
        'name': 'Verilator',
        'id': 'verilator',
        'windows_bin': None,
        'linux_bin': 'Verilator'}

    STANDARD_LIBS = ['std', 'ieee', 'ieee_proposed', 'vl', 'synopsys']

    HDL_FILES = {VerilogFile: '', VHDLFile: '', SVFile: ''}

    CLEAN_TARGETS = {'clean': ["run.command", "ivl_vhdl_work", "work"],
                     'mrproper': ["*.vcd", "*.vvp"]}

    SIMULATOR_CONTROLS = {'vlog': 'echo $< >> run.command',
                          'vhdl': 'echo $< >> run.command',
                          'compiler': 'verilator $(VERILATOR_OPT) --lint-only -Wall -Wno-fatal --error-limit 1000 '
                                      '-f run.command --top-module $(TOP_MODULE) --exe $(TOP_MODULE)_main.cpp)'}

    def __init__(self):
        super(ToolVerilator, self).__init__()
        self._tool_info.update(ToolVerilator.TOOL_INFO)
        self._hdl_files.update(ToolVerilator.HDL_FILES)
        self._standard_libs.extend(ToolVerilator.STANDARD_LIBS)
        self._clean_targets.update(ToolVerilator.CLEAN_TARGETS)
        self._simulator_controls.update(ToolVerilator.SIMULATOR_CONTROLS)

    def _makefile_sim_compilation(self):
        """Generate compile simulation Makefile target for Verilator"""
        self.writeln("simulation: include_dirs $(VERILOG_OBJ) $(VHDL_OBJ)")
        self.writeln("\t\t" + self._simulator_controls['compiler'])
        self.writeln()
        self.writeln("include_dirs:")
        # self.writeln("\t\techo \"# Verlator command file,"
        #              " generated by HDLMake\" > run.command")
        self.writeln()
        for inc in self.manifest_dict.get("include_dirs", []):
            self.writeln("\t\techo \"-I" + inc + "\" >> run.command")
        self.writeln('\n')
        self._makefile_sim_dep_files()

    def _makefile_sim_options(self):
        """Switch between lint_only or c++ generation option"""
        verilator_mode = self.manifest_dict.get("verilator_mode", "lint")
        verilator_args = self.manifest_dict.get("verilator_args", "")
        defines = self.manifest_dict.get("defines", {})
        if verilator_mode == "lint":
            verilator_opt = "--lint-only "
        elif verilator_mode == "compile":
            verilator_opt = "--cc -O3 -CFLAGS -O3 "
        else:
            logging.error("Unsupported Verlator mode: %s (using lint mode)"%verilator_mode)
            verilator_opt = "--lint-only "
        verilator_opt += verilator_args
        for k,v in defines.items():
            verilator_opt += " +define+%s=%s"%(k, str(v))
        verilator_string = f"""VERILATOR_OPT := ${verilator_opt}\n"""
        self.writeln(verilator_string)

